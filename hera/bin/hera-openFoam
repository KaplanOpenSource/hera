#! /usr/bin/env python
import argparse
import logging
from hera.simulations.openFoam import CLI
from hera.simulations import CLI as workflowCLI


from hera.utils.logging import initialize_logging, with_logger


def addSolverTemplateOptions(subparser, solverName, incompressible):
    """
        Adds the template options.
    Parameters
    ----------
    parser

    Returns
    -------

    """
    ## ---------------- templates.
    parser_templates = subparser.add_parser('templates', help=f'Manages the templates of  {solverName}')
    templates_subparser = parser_templates.add_subparsers()

    ## ---------------- list flow templates
    templates_list = templates_subparser.add_parser('list',
                                                    help='List the existing templates in the project for that solver')
    templates_list.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    templates_list.set_defaults(solver=solverName)
    templates_list.set_defaults(func=CLI.foam_solver_templates_list)

    ## ---------------- create case from template
    templates_create = templates_subparser.add_parser('get', help=f'Create the case for {solverName} with the template')
    templates_create.add_argument('templateName', type=str, default=None, help="The template name")
    templates_create.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    templates_create.add_argument('--groupName', type=str, default=None, help="The name of the group")
    templates_create.add_argument('--projectPath', type=str, default=None, help="The directory of the project")
    templates_create.set_defaults(solver=solverName)
    templates_create.set_defaults(func=CLI.foam_solver_template_create)

    ##
    #   Adds a workfow to the project and executes it.
    ## ---------------- execute workflow and add it to db (unless --noDB flag exists).
    ##
    parser_prepare = subparser.add_parser('executeWorkflow', help='Adds the workflow to the DB and executes it.')
    parser_prepare.add_argument('workflow', type=str, help='The workflow file to load')
    parser_prepare.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    parser_prepare.add_argument('--workflowGroup', dest="workflowGroup", default=None, type=str,
                                help='The simulation group. [Optional]. If None, try to infer from the file name  ')
    parser_prepare.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                help='overwrite the existing workflow with the same name')
    parser_prepare.add_argument('--assignName', dest="assignName", action="store_true", default=False,
                                help='If true, finds a new name to the simulation based on the maximal id in the simulation group.')
    parser_prepare.add_argument('--allowDuplicate', dest="force", action="store_true", default=False,
                                help='Add the current workflow to the DB even if it exists there under a different name')
    parser_prepare.add_argument('--noDB', dest="noDB", action="store_true", default=False,
                                help='Run the workflow without adding to the DB')
    parser_prepare.set_defaults(execute=True)
    parser_prepare.set_defaults(func=CLI.foam_solver_template_buildExecute)

    parser_list = subparser.add_parser('list', help=f'Lists the groups and simulations of solver {solverName}')
    parser_list.add_argument('--projectName', dest="projectName", default=None, type=str, help=projectNameHelpDesc)
    parser_list.add_argument('--longTable', dest="longFormat", action="store_true", default=False,
                             help='If exsists, list the parameters as a long table. If does not exist data is pivoted')
    parser_list.add_argument('--transpose', dest="transpose", action="store_true", default=False,
                             help='If exsists, list the simulations as rows and the variables as columns')

    parser_list.add_argument('--format', dest="format", default="pandas", choices=["pandas", "json", "latex", "csv"],
                             help='The output format: pandas (print the pandas), json, latex')

    parser_list.add_argument('--file', dest="file", default=None,
                             help='write the output to a file')

    parser_list.set_defaults(solver=solverName)
    parser_list.set_defaults(func=CLI.foam_solver_simulations_list)

    ### ------------------------
    delete_parser = subparser.add_parser('delete', help='Delete a workflow. Exports the simulation that was deleted ')
    delete_parser.add_argument('workflows', nargs="+", type=str, help='the list of workflows to remove')
    delete_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    delete_parser.add_argument('--export',dest="Export", default=False, action="store_true", help='Export the deleted file from the DB to the disk')
    delete_parser.add_argument('--overwrite', dest="forceOverwrite", default=False, action="store_true",
                               help='Overwrite the export if the file exists')

    delete_parser.set_defaults(func=workflowCLI.workflow_delete)



# foam_templates_node_list

def addMeshOptions(subparser, solverName, incompressible):
    """
        Adds mesh handling of the subparsers.

    Parameters
    ----------
    subparser

    solverName : string
        The name of the solver.

    Returns
    -------

    """
    projectNameHelpDesc = "projectName [optional]"

    ## ---------------- blockMesh.
    blockmesh_parser = subparser.add_parser('blockMesh', help=f'Manages blockMesh in {solverName}')
    blockmesh_subparser = blockmesh_parser.add_subparsers()

    #### ----------------  set boundaries from file.
    blockmesh_setBoundsFromFile = blockmesh_subparser.add_parser('setBoundsFromFile', help='Sets the boundary in the ')
    blockmesh_setBoundsFromFile.add_argument('templateName', type=str, default=None, help="The template file Name")
    blockmesh_setBoundsFromFile.add_argument('fileName', type=str, default=None, help="The topography file Name")
    blockmesh_setBoundsFromFile.add_argument('--dx', type=str, required=True, help="The dx of a cell block in [m]")
    blockmesh_setBoundsFromFile.add_argument('--dy', type=str, required=True, help="The dy of a cell block in [m]")
    blockmesh_setBoundsFromFile.add_argument('--dz', type=str, required=True, help="The dz of a cell block in [m]")
    blockmesh_setBoundsFromFile.add_argument('--Z', type=str, required=True, help="The maximal Z in [m]")
    blockmesh_setBoundsFromFile.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    blockmesh_setBoundsFromFile.set_defaults(solver=solverName)
    blockmesh_setBoundsFromFile.set_defaults(func=CLI.foam_mesh_blockMesh)

    #### ----------------  set the height of the domain
    blockMesh_setDomainHeight = blockmesh_subparser.add_parser('setDomainHeight', help='Sets the boundary in the ')
    blockMesh_setDomainHeight.add_argument('templateName', type=str, default=None, help="The template file Name")
    blockMesh_setDomainHeight.add_argument('Z', type=str, default=None, help="The height")
    blockMesh_setDomainHeight.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    blockMesh_setDomainHeight.set_defaults(solver=solverName)
    blockMesh_setDomainHeight.set_defaults(func=CLI.foam_mesh_setDomainHeight)

    # ## ---------------- snappyHexMesh.
    # snappyhex_parser  = subparser.add_parser('snappyHexMesh', help=f'Manages snappyHexMesh in {solverName}')
    # snappyhex_subparser = snappyhex_parser.add_subparsers()
    #
    # ## ----------------  Add object
    # snappyhex_addObject = snappyhex_subparser.add_parser('addObject', help='Adds the object to snappy')
    # snappyhex_addObject.add_argument('templateName', type=str, default=None, help="A node template file / or resource ")
    # snappyhex_addObject.add_argument('fileName', type=str, default=None, help="The object")
    # snappyhex_addObject.add_argument('--defaults', type=str, default=None, help="The defaults of the system. Either file or defaults of the toolkit")
    # snappyhex_addObject.add_argument('--keepBC', type=str, default=True, action="store_false",  help="If True, keep the BC of the blockMesh, just add the BC of the object. Else, remove the BC of the blockmesh")
    # snappyhex_addObject.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    # snappyhex_addObject.set_defaults(solver=solverName)
    # snappyhex_addObject.set_defaults(func=CLI.foam_snappyhexmesh_addobject)
    #
    # ## ----------------  Set point
    # snappyhex_setLocationInDomain = snappyhex_subparser.add_parser('setLocationInDomain', help='set the point in he domain')
    # snappyhex_setLocationInDomain.add_argument('templateName', type=str, default=None, help="The template file Name")
    # snappyhex_setLocationInDomain.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    # setPoint_subparser = snappyhex_setLocationInDomain.add_subparsers()
    #
    # ## ------------------------- As location
    # setPoint_subparser_location = setPoint_subparser.add_parser('point', help='Adds the object to snappy')
    # setPoint_subparser_location.add_argument('x', type=str, default=None, help="x point")
    # setPoint_subparser_location.add_argument('y', type=str, default=None, help="y point")
    # setPoint_subparser_location.add_argument('z', type=str, default=None, help="z point")
    # setPoint_subparser_location.set_defaults(solver=solverName,
    #                                          locationType="point",
    #                                          func=CLI.foam_snappyhexmesh_setLocationInDomain)
    #
    # ## ------------------------- As center
    # setPoint_subparser_center = setPoint_subparser.add_parser('center', help='Adds the object to snappy')
    # setPoint_subparser_center.set_defaults(solver=solverName,
    #                                          locationType="center",
    #                                          func=CLI.foam_snappyhexmesh_setLocationInDomain)

    ## ---------------- Initial conditions (IC)
    IC_parser = subparser.add_parser('IC', help=f'Manages initial conditions in {solverName}')
    IC_subparser = IC_parser.add_subparsers()

    #### ----------------  set boundaries from file.
    IC_setHydrostaticPressure = IC_subparser.add_parser('hydrostaticPressure',
                                                        help='Sets the pressure to be in hydrostatic pressure ')
    IC_setHydrostaticPressure.add_argument('caseDirectory', type=str, help="The name of the case to set")
    IC_setHydrostaticPressure.add_argument('--startTime', type=str, default=0, help="The initial time")
    IC_setHydrostaticPressure.set_defaults(solver=solverName, func=CLI.IC_hydrostaticPressure,
                                           incompressible=incompressible)

    # IC_parser.add_argument('fieldName', type=str, nargs="*", required=True, help="The name of the field(s) to set")
    # IC_parser.add_argument('fileName', type=str, default=None,
    #                        help="The file name. Can be either netcdf or parquet.   ")
    # IC_parser.add_argument('--parser', type=str, choice=["WRF", "xarray"], default="xarray",
    #                        help="If netcdf, should supply the parser")
    # IC_parser.set_defaults(solver=solverName, func=CLI.foam_IC)

    ## ---------------- Boundry conditions (BC)
    # IC_parser = subparser.add_parser('BC', help=f'Manages initial conditions in {solverName}')
    # IC_parser.add_argument('fieldName', type=str, nargs="*", required=True, help="The name of the field(s) to set")
    # IC_parser.add_argument('fileName', type=str, default=None,
    #                        help="The file name. Can be either netcdf or parquet.   ")
    # IC_parser.add_argument('--parser', type=str, choice=["WRF", "xarray"], default="xarray",
    #                        help="If netcdf, should supply the parser")
    # IC_parser.set_defaults(solver=solverName, func=CLI.foam_BC)


def addSolverCaseManagement(subparser, solverName, incompressible):
    """
        Adds the handling of the case.
    Parameters
    ----------
    subparser
    solverName

    Returns
    -------

    """
    parser_templates = subparser.add_parser('case', help=f'Manages the case of  {solverName}')
    case_subparser = parser_templates.add_subparsers()

    parser_createEmpty = case_subparser.add_parser('createEmpty', help='Creates a case')
    parser_createEmpty.add_argument('caseDirectory', type=str, help='The directory to create')
    parser_createEmpty.add_argument('--fields', nargs='*', type=str, help='[list of field]')
    parser_createEmpty.add_argument('--fieldsDescription', default=None, type=str,
                                    help="A JSON file with addition fields definitions (in file)", required=False)
    parser_createEmpty.set_defaults(incompressible=incompressible)
    parser_createEmpty.set_defaults(solver=solverName)
    parser_createEmpty.set_defaults(func=CLI.Foam_createEmpty)

    parser_FieldDescription = case_subparser.add_parser('writeFieldDescription',
                                                        help='Creates a template of field description')
    parser_FieldDescription.add_argument('fileName', type=str, help='The directory to create')
    parser_FieldDescription.add_argument('--fields', nargs='*', type=str, help='[list of field]')
    parser_FieldDescription.set_defaults(incompressible=incompressible)
    parser_FieldDescription.set_defaults(solver=solverName)
    parser_FieldDescription.set_defaults(func=CLI.Foam_parser_FieldDescription)


def addSolverPostProcess(subparser, solverName, incompressible):
    """
        Handles the postprocess of the different solvers.
    Parameters
    ----------
    subparser
    solverName
    incompressible

    Returns
    -------

    """
    parser_templates = subparser.add_parser('postProcess', help=f'PostProcess of  {solverName}')
    case_subparser = parser_templates.add_subparsers()

    parser_executeVTK = case_subparser.add_parser('executeVTK',
                                                  help='Executes a VTK JSON File, and loads to project (if --noLoad does not exist)')
    parser_executeVTK.add_argument('caseDirectory', type=str, help='The directory to create')
    parser_executeVTK.add_argument('--fieldList', nargs='*', type=str, help='[list of field]')
    parser_executeVTK.add_argument('--timeList', nargs='*', default=None, type=str,
                                   help="The list of time steps to process. If does not exist process all. Use: First and Last for the first and last timesteps only. ",
                                   required=False)
    parser_executeVTK.add_argument('--noLoad', default=False, action="store_true",
                                   help="If flag exists, do not load the pipeline to the project", required=False)
    parser_executeVTK.set_defaults(incompressible=incompressible)
    parser_executeVTK.set_defaults(solver=solverName)
    parser_executeVTK.set_defaults(func=CLI.Foam_postProcess_VTKPipeline_execute)

    parser_loadVTK = case_subparser.add_parser('loadVTK', help='Loads a VTK JSON File results to the DB')
    parser_loadVTK.add_argument('caseDirectory', type=str, help='The directory to create')
    parser_loadVTK.add_argument('--fields', nargs='*', type=str, help='[list of field]')
    parser_loadVTK.add_argument('--timeList', default=None, type=str,
                                help="The list of time steps to process. If does not exist process all. Use: First and Last for the first and last timesteps only. ",
                                required=False)
    parser_loadVTK.set_defaults(incompressible=incompressible)
    parser_loadVTK.set_defaults(solver=solverName)
    parser_loadVTK.set_defaults(func=CLI.Foam_postProcess_VTKPipeline_load)


if __name__ == "__main__":
    initialize_logging(
        with_logger("hermes", handlers=['console'], level='DEBUG', propagate=False),
        with_logger("hera.simulations", handlers=['console'], level='DEBUG', propagate=False),
        with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False) #,
        # with_logger("hera.utils", handlers=['console'], level='INFO', propagate=False),
    )
    logger = logging.getLogger("hera.bin.hera-openfoam")

    projectNameHelpDesc = 'The project name. [Optional]. If does not exist take from caseConfiguration'

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Topic:')

    ############################################
    ### ------------------------------ SOLVERS
    ############################################

    ## ====================================================
    ## ================== simpleFoam
    ## ====================================================
    simpleFoam_parser = subparsers.add_parser('simpleFoam', help='Handles simpleFOAM solver')
    simpleFoam_subparser = simpleFoam_parser.add_subparsers(help='Handles simpleFOAM solver')

    ## ---------------- Case management
    addSolverCaseManagement(subparser=simpleFoam_subparser, solverName="simpleFoam", incompressible=True)

    ## ----- template handling
    addSolverTemplateOptions(subparser=simpleFoam_subparser, solverName="simpleFoam", incompressible=True)

    ## ====================================================
    ## ================== pimpleFoam
    ## ====================================================
    pimpleFoam_parser = subparsers.add_parser('pimpleFoam', help='Handles pimpleFOAM solver')
    pimpleFoam_subparser = pimpleFoam_parser.add_subparsers(help='Handles pimpleFOAM solver')

    ## ---------------- Case management
    addSolverCaseManagement(subparser=pimpleFoam_subparser, solverName="pimpleFoam", incompressible=True)

    ## ----- template handling
    addSolverTemplateOptions(subparser=pimpleFoam_subparser, solverName="pimpleFoam", incompressible=True)

    ## ====================================================
    ## ================== oguraPhillipShallowConvectionFOAM
    ## ====================================================
    oguraPhillipShallowConvectionFOAM_parser = subparsers.add_parser('oguraPhillipShallowConvectionFOAM',
                                                                     help='Handles indoorFOAMBoussinesq solver')
    oguraPhillipShallowConvectionFOAM_subparser = oguraPhillipShallowConvectionFOAM_parser.add_subparsers(
        help='Handles oguraPhillipShallowConvectionFOAM solver')

    ## ---------------- Case management
    addSolverCaseManagement(subparser=oguraPhillipShallowConvectionFOAM_subparser,
                            solverName="oguraPhillipShallowConvectionFOAM", incompressible=True)

    ## ----- template handling
    addSolverTemplateOptions(subparser=oguraPhillipShallowConvectionFOAM_subparser,
                             solverName="oguraPhillipShallowConvectionFOAM", incompressible=True)

    ## ====================================================
    ## ================== buoyantReactingFoam
    ## ====================================================
    buoyantReactingFoam_parser = subparsers.add_parser('buoyantReactingFoam', help='Handles rhoReactingBuoyantFoam')
    buoyantReactingFoam_subparser = buoyantReactingFoam_parser.add_subparsers(help='Handles rhoReactingBuoyantFoam')

    ## ---------------- Case management
    addSolverCaseManagement(subparser=buoyantReactingFoam_subparser, solverName="buoyantReactingFoam",
                            incompressible=False)

    ## ----- template handling
    addSolverTemplateOptions(subparser=buoyantReactingFoam_subparser, solverName="buoyantReactingFoam",
                             incompressible=False)

    ## ----- mesh handling
    addMeshOptions(subparser=buoyantReactingFoam_subparser, solverName="buoyantReactingFoam", incompressible=False)

    ## ====================================================
    ## ================== scalarTransportFoam
    ## ====================================================
    scalarTransportFoam_parser = subparsers.add_parser('scalarTransportFoam', help='Handles scalarTransportFoam')
    scalarTransportFoam_subparser = scalarTransportFoam_parser.add_subparsers(help='Handles scalarTransportFoam')

    ## ---------------- Case management
    addSolverCaseManagement(subparser=scalarTransportFoam_subparser, solverName="scalarTransportFoam",
                            incompressible=True)

    ## ----- template handling
    addSolverTemplateOptions(subparser=scalarTransportFoam_subparser, solverName="scalarTransportFoam",
                             incompressible=True)

    ## ====================================================
    ## ================== homogenousWindLogProfile
    ## ====================================================
    homogenousWindLogProfile_parser = subparsers.add_parser('homogenousWindLogProfile',
                                                              help='Handles homogenousWindLogProfile')
    homogenousWindLogProfile_subparser = homogenousWindLogProfile_parser.add_subparsers(
        help='Handles homogenousWindLogProfile')

    ## ---------------- Case management
    addSolverCaseManagement(subparser=homogenousWindLogProfile_subparser, solverName="homogenousWindLogProfile",
                            incompressible=True)

    ## ----- template handling
    addSolverTemplateOptions(subparser=homogenousWindLogProfile_subparser, solverName="homogenousWindLogProfile",
                             incompressible=True)

    ## ====================================================
    ## ================== StochasticLagrantianSolver
    ## ====================================================
    stochasticLagrnagian_parser = subparsers.add_parser('stochasticLagrangian',
                                                        help='Handles stochasticLagrnagian solver applications')
    stochasticLagrangian_subparser = stochasticLagrnagian_parser.add_subparsers(
        help='Handles stochasticLagrnagian solver applications')
    #
    # ## -- DispersionFlow
    dispersionFlow_parser = stochasticLagrangian_subparser.add_parser('dispersionFlow',
                                                                      help='Creates a dispersion flow from a flow')
    dispersionFlow_parser_subparser = dispersionFlow_parser.add_subparsers(help='Handles the dispersion flows')
    create_dispersionFlow_parser = dispersionFlow_parser_subparser.add_parser('create',
                                                                              help='Creates a dispersion flow from a flow')
    create_dispersionFlow_parser.add_argument('OriginalFlowField', type=str,
                                              help="The name/directory/workflow file of the origninal workflow")
    create_dispersionFlow_parser.add_argument('dispersionFlowName', type=str,
                                              help="The parameters of the dispersion flow")
    create_dispersionFlow_parser.add_argument('--parameters', dest='dispersionFlowParams', type=str,
                                              help="The parameters of the dispersion flow")
    create_dispersionFlow_parser.add_argument('--dispersionDuration', required=True, type=str,
                                              help="The dispersion duration")
    create_dispersionFlow_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    create_dispersionFlow_parser.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                              help='overwrite the case. Deletes the currect directory if needs to')
    create_dispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_dispersionFlow_create)

    create_dispersionFlow_writeTemplate = dispersionFlow_parser_subparser.add_parser('writeTemplate',
                                                                                     help='Writes an empty tempate for the dispersion flow')
    create_dispersionFlow_writeTemplate.add_argument('templateFile', type=str, help="The name of the template workflow")
    create_dispersionFlow_writeTemplate.set_defaults(func=CLI.stochasticLagrangian_dispersionFlow_writeEmptyTemplate)

    ## -- createDispersionFlow
    dispersion_parser = stochasticLagrangian_subparser.add_parser('dispersion', help='Creates a dispersion case')
    dispersion_parser_subparser = dispersion_parser.add_subparsers(help='Handles the dispersion')

    createDispersionFlow_parser = dispersion_parser_subparser.add_parser('create',
                                                                         help='Creates a dispersionflow, runs the dispersion and adds to DB')
    createDispersionFlow_parser.add_argument('dispersionName', type=str, help="The dispersion workflow.")
    createDispersionFlow_parser.add_argument('dispersionFlowField', type=str,
                                             help="The name dispersion flow (a directory or a stored one in the DB)")
    createDispersionFlow_parser.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                             help='overwrite the case. Deletes the currect directory if needs to')
    createDispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_dispersion_create)

    ## -- create source
    injector_parser = stochasticLagrangian_subparser.add_parser('injectors',
                                                                help='Creates an initial configuration for the lagrangian particles')
    injector_subparser = injector_parser.add_subparsers(help='Creates injectors')

    manualInjection_parser = injector_subparser.add_parser('positionFile',
                                                           help='Creates an initial configuration for the lagrangian particles')
    manualInjection_subparser = manualInjection_parser.add_subparsers(
        help='Creates an initial configuration for the lagrangian particles')

    source_cylinder_subparser = manualInjection_subparser.add_parser('cylinder',
                                                                     help='Creates a cylinder initial source shapre')
    source_cylinder_subparser.add_argument('dispersionName', type=str, help="The dispersion workflow.")
    source_cylinder_subparser.add_argument('--center', nargs="*", type=str, help="The center of the cylinder.")
    source_cylinder_subparser.add_argument('--height', type=str, help="The height.")
    source_cylinder_subparser.add_argument('--radius', type=str, help="The radius of the cylinder.")
    source_cylinder_subparser.add_argument('--particles', type=str, help="The radius of the cylinder.")
    source_cylinder_subparser.set_defaults(func=CLI.stochasticLagrangian_source_cylinder)

    ## -- create source files.
    source_createReleaseRateFile_subparser = manualInjection_subparser.add_parser('createReleaseRateFile',
                                                                                  help='Creates a mass release at from the parquet file')
    source_createReleaseRateFile_subparser.set_defaults(func=CLI.stochasticLagrangian_source_makeEscapedMassFile)

    ## -- post process
    postProcess_parser = stochasticLagrangian_subparser.add_parser('postProcess',
                                                                   help='post process for the  lagrangian particles')
    postProcess_subparser = postProcess_parser.add_subparsers(help='Converts the openFOAM to other formats')

    postProcess_parquet_subparser = postProcess_subparser.add_parser('toParquet',
                                                                     help='Creates a parquet files of the lagrangian particles')
    postProcess_parquet_subparser.add_argument('dispersionName', type=str, help="The dispersion workflow or directory")
    postProcess_parquet_subparser.add_argument('--outputDirectory', type=str, default="VTK",
                                               help="The path to save the VTK files. ")
    postProcess_parquet_subparser.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                               help='overwrite the case. Deletes the currect directory if needs to')
    postProcess_parquet_subparser.add_argument('--cloudName', type=str, default="kinematicCloud",
                                               help="The name of the cloud. default: kinematicCloud")
    postProcess_parquet_subparser.set_defaults(func=CLI.stochasticLagrangian_postProcess_toParquet)

    postProcess_vtk_subparser = postProcess_subparser.add_parser('toVTK',
                                                                 help='Creates a parquet files of the lagrangian particles')
    postProcess_vtk_subparser.add_argument('dispersionName', type=str, help="The dispersion workflow or directory")
    postProcess_vtk_subparser.add_argument('--outputDirectory', type=str, default="VTK",
                                           help="The path to save the VTK files. ")
    postProcess_vtk_subparser.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                           help='overwrite the case. Deletes the currect directory if needs to')
    postProcess_vtk_subparser.add_argument('--cloudName', type=str, default="kinematicCloud",
                                           help="The name of the cloud. default: kinematicCloud")
    postProcess_vtk_subparser.set_defaults(func=CLI.stochasticLagrangian_postProcess_toVTK)

    ## ---------------- Case management
    addSolverCaseManagement(subparser=stochasticLagrangian_subparser, solverName="StochasticLagrangianSolver",
                            incompressible=True)

    ## ----- template handling
    addSolverTemplateOptions(subparser=stochasticLagrangian_subparser, solverName="StochasticLagrangianSolver",
                             incompressible=True)

    ############################################
    ### ------------------------------ ObjUtils
    ############################################

    objects_parser = subparsers.add_parser('objects', help='Handles obj/stl files')
    objects_subparser = objects_parser.add_subparsers(help='Handles simpleFOAM solver')
    objects_parser_createVerticesAndBoundary = objects_subparser.add_parser('createVerticesAndBoundary',
                                                                            help='Creates the vertices and the bounradies for the blockmesh and the changedictionary nodes. ')
    objects_parser_createVerticesAndBoundary.add_argument('objectFile', type=str, help='The filename')
    objects_parser_createVerticesAndBoundary.add_argument('--fields', nargs='*', type=str, help='[list of field]')

    objects_parser_createVerticesAndBoundary.set_defaults(func=CLI.objects_createVerticesAndBoundary)

    ## ====================================================
    ## ================== Workflows
    ## ====================================================
    execute_parser = subparsers.add_parser('buildExecute',
                                                   help='Creates a dispersionflow, runs the dispersion and adds to DB')
    execute_parser.add_argument('workflow', type=str, help="The dispersion workflow or directory")
    execute_parser.add_argument('--projectName', type=str, default=None, help="The project name. Do no specify fordefault project")
    execute_parser.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                help='overwrite the case. Deletes the currect directory if needs to')
    execute_parser.add_argument('--noDB', dest="noDB", action="store_true", default=False,
                                help='Ignore the database, just run the workflow. ')
    execute_parser.add_argument('--assignName', dest="assignName", action="store_true", default=False,
                                help='If true, finds a new name to the simulation based on the maximal id in the simulation group.')

    execute_parser.add_argument('--workflowGroup', dest="workflowGroup", default=None, type=str,
                                help='The simulation group. [Optional]. If None, try to infer from the file name  ')

    execute_parser.set_defaults(execute=True)
    execute_parser.set_defaults(func=CLI.foam_solver_template_buildExecute)

    parsed = parser.parse_args()
    logger.debug(f"Got {parsed} in the command line")
    if 'func' not in parsed:
        parser.print_help()
    else:
        logger.debug("Activating the function")
        parsed.func(parsed)
