#! /usr/bin/env python
import argparse
import logging
from hera.simulations.openFoam import CLI

if __name__ == "__main__":
    # initialize_logging(
    #     with_logger("hera.simulations", handlers=['console'], level='DEBUG', propagate=False),
    #     with_logger("hera.simulations.hermesWorkflowToolkit", handlers=['console'], level='INFO', propagate=False),
    #     with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
    # )
    logger = logging.getLogger("hera.bin.hera-openfoam")

    projectNameHelpDesc = 'The project name. [Optional]. If does not exist take from caseConfiguration'

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Topic:')

    ############################################
    ### ------------------------------ SOLVERS
    ############################################

    ## ================== StochasticLagrantianSolver
    stochasticLagrnagian_parser = subparsers.add_parser('stochasticLagrangian', help='Handles stochasticLagrnagian solver applications')
    stochasticLagrnagian_subparser = stochasticLagrnagian_parser.add_subparsers(help='Handles stochasticLagrnagian solver applications')

    ## -- createDispersionFlow
    dispersionFlow_parser = stochasticLagrnagian_subparser.add_parser('dispersionFlow', help='Creates a dispersion flow from a flow')
    dispersionFlow_parser_subparser = dispersionFlow_parser.add_subparsers(help='Handles stochasticLagrnagian solver applications')

    create_dispersionFlow_parser_parser = dispersionFlow_parser_subparser.add_parser('create', help='Creates a dispersion flow from a flow')
    create_dispersionFlow_parser_parser.add_argument('configurationFile',default="caseConfiguration.json", type=str, help="A configuration file that holds the data for the run ")
    create_dispersionFlow_parser_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    # remove all old - flag to delete the old dispersion flows.
    create_dispersionFlow_parser_parser.set_defaults(func=CLI.stochasticLagrangian_create_dispersionFlow)

    ## -- listDispersionFlowFields - build
    list_dispersionFlow_parser = dispersionFlow_parser_subparser.add_parser('list', help='Lists the DispersionFlow in the DB (with the differences between them)')
    # Maybe format? to allow export to CVS?
    #createDispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_list_dispersionFlow)

    ## -- createExampleConfiguationFile - build
    makeEmpty_dispersionFlow_parser = dispersionFlow_parser_subparser.add_parser('writeEmpty', help='Creates an example configuration file')
    makeEmpty_dispersionFlow_parser.add_argument('configurationFileName', type=str, help="The name of the empty configuration file. ")
    #createDispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_makeEmpty_dispersionFlow)

    ## -- createDispersionFlow
    createDispersionFlow_parser = stochasticLagrnagian_subparser.add_parser('createDispersion', help='Creates a dispersionflow, runs the dispersion and adds to DB')
    createDispersionFlow_parser.add_argument('dispersionWorkflow', type=str, help="The dispersion workflow.")
    createDispersionFlow_parser.add_argument('dispersionFlowField', type=str,help="The name dispersion flow (a directory or a stored one in the DB)")
    createDispersionFlow_parser.add_argument('--rewrite', dest="rewrite", action="store_true", default=False,
                                             help="Delete the dispersion case and rerun the workflow")
    createDispersionFlow_parser.add_argument('--updateDB', dest="updateDB", action="store_true", default=False, help="Update DB if there is a mismatch with the file")
    createDispersionFlow_parser.add_argument('--exportFromDB', dest="exportFromDB", action="store_true", default=False, help="If the workflow mismatch the DB, export from DB")
    createDispersionFlow_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    createDispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_createDispersionFlow)

    parsed = parser.parse_args()

    logger.debug(f"Got {parsed} in the command line")
    if 'func' not in parsed:
        parser.print_help()
    else:
        logger.debug("Activating the function")
        parsed.func(parsed)
