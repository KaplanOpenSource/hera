#! /usr/bin/env python
import argparse
import logging
from hera.simulations.openFoam import CLI

if __name__ == "__main__":
    # initialize_logging(
    #     with_logger("hera.simulations", handlers=['console'], level='DEBUG', propagate=False),
    #     with_logger("hera.simulations.hermesWorkflowToolkit", handlers=['console'], level='INFO', propagate=False),
    #     with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
    # )
    logger = logging.getLogger("hera.bin.hera-openfoam")

    projectNameHelpDesc = 'The project name. [Optional]. If does not exist take from caseConfiguration'

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Topic:')

    ############################################
    ### ------------------------------ SOLVERS
    ############################################

    ## StochasticLagrantianSolver
    stochasticLagrnagian_parser = subparsers.add_parser('stochasticLagrnagian', help='Handles stochasticLagrnagian solver applications')
    stochasticLagrnagian_subparser = stochasticLagrnagian_parser.add_subparsers(help='Handles stochasticLagrnagian solver applications')

    createDispersionFlow_parser = stochasticLagrnagian_subparser.add_parser('createDispersionFlow', help='Creates a dispersion flow from a flow')
    createDispersionFlow_parser.add_argument('configurationFile', type=str, help="A configuration file that holds the data for the run ")
    createDispersionFlow_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    createDispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_makeDispersionFlow)

    createDispersionFlow_parser = stochasticLagrnagian_subparser.add_parser('createExampleConfiguationFile', help='Creates an example configuration file')
    createDispersionFlow_parser.add_argument('configurationFile', type=str, help="A configuration file that holds the data for the run ")
    #createDispersionFlow_parser.set_defaults(func=CLI.stochasticLagrangian_makeDispersionFlow)


    parsed = parser.parse_args()

    logger.debug(f"Got {parsed} in the command line")
    if 'func' not in parsed:
        parser.print_help()
    else:
        logger.debug("Activating the function")
        parsed.func(parsed)
