#! /usr/bin/env python
import argparse
import logging
from hera.utils.logging import initialize_logging,with_logger
from hera.simulations import CLI

if __name__ == "__main__":
    initialize_logging(
          with_logger("hera.simulations", handlers=['console'], level='INFO', propagate=False)
    #     with_logger("hera.simulations.hermesWorkflowToolkit", handlers=['console'], level='INFO', propagate=False),
    #     with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
    )

    logger = logging.getLogger("hera.bin.hera_workflows")
    logger.debug("Starting the hera_workflows command line")

    projectNameHelpDesc = 'The project name. [Optional]. If does not exist take from caseConfiguration'

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Topic:')

    ##
    #   List
    ##
    list_parser = subparsers.add_parser('list', help='Lists items in the DB')
    list_subparser = list_parser.add_subparsers(help='Handles simulation group')

    ## --- groups
    parser_prepare = list_subparser.add_parser('groups', help='List the group in the project.')
    parser_prepare.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    parser_prepare.add_argument('--solver', type=str,dest="solver", default=None, help='Specify the solver of the workflow')
    parser_prepare.add_argument('--workflowName',dest="workflowName",action="store_true", default=False, help='If exists, show the simulation names')
    parser_prepare.set_defaults(func=CLI.WorkflowsGroup_list)

    ## --- Workflows
    listSimulations_parser = list_subparser.add_parser('workflows', help='Lists the workflows in the group of that project.')
    listSimulations_parser.add_argument('group', type=str, default=None, help='The simulation group to list')
    listSimulations_parser.add_argument('--projectName', dest="projectName", default=None, type=str, help=projectNameHelpDesc)
    listSimulations_parser.add_argument('--nodes', dest="nodes",action="store_true", default=False, help='If exsists, list the nodes of each simulation')
    listSimulations_parser.add_argument('--parameters', dest="parameters", action="store_true", default=False,
                                        help='If exsists, list the nodes of each simulation with their parameters (replace --nodes)')
    #listSimulations_parser.add_argument('--JSON', dest="json", default=False, type=bool,
    #                                    help='If exsists, return the results as JSON and not as pandas table')
    listSimulations_parser.set_defaults(func=CLI.workflow_list)

    ##
    #   Adds a workfow to the project. Optional execution.
    ##
    parser_prepare = subparsers.add_parser('add', help='Adds a workflow to the group in the group.')
    parser_prepare.add_argument('workflow', type=str, help='The workflow file to load')
    parser_prepare.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    parser_prepare.add_argument('--workflowGroup',dest="workflowGroup", default=None, type=str, help='The simulation group. [Optional]. If None, try to infer from the file name  ')
    parser_prepare.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                help='overwrite the existing workflow with the same name')
    parser_prepare.add_argument('--assignName', dest="assignName", action="store_true", default=False,
                                help='If true, finds a new name to the simulation based on the maximal id in the simulation group.')
    parser_prepare.add_argument('--allowDuplicate', dest="force", action="store_true", default=False,
                                help='Add the current workflow to the DB even if it exists there under a different name')
    parser_prepare.add_argument('--execute', dest="execute", action="store_true", default=False,
                                help='If flag exists, store the execute flag. ')
    parser_prepare.set_defaults(func=CLI.workflow_add)

    ##
    #   Adds a workfow to the project and executes it.
    ##
    parser_prepare = subparsers.add_parser('execute', help='Adds the workflow and executes it.')
    parser_prepare.add_argument('workflow', type=str, help='The workflow file to load')
    parser_prepare.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    parser_prepare.add_argument('--workflowGroup', dest="workflowGroup", default=None, type=str,
                                help='The simulation group. [Optional]. If None, try to infer from the file name  ')
    parser_prepare.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                help='overwrite the existing workflow with the same name')
    parser_prepare.add_argument('--assignName', dest="assignName", action="store_true", default=False,
                                help='If true, finds a new name to the simulation based on the maximal id in the simulation group.')
    parser_prepare.add_argument('--allowDuplicate', dest="force", action="store_true", default=False,
                                help='Add the current workflow to the DB even if it exists there under a different name')
    parser_prepare.set_defaults(execute=True)
    parser_prepare.set_defaults(func=CLI.workflow_add)

    ### ------------------------
    export = subparsers.add_parser('export', help='Saves the workflow to the disk.')
    # --build - also builds the python executer

    ### ------------------------
    compare_parser = subparsers.add_parser('compare', help='Compare two or more workflows')
    compare_parser.add_argument('workflows', nargs="+", type=str,
                                help='[groupName] - compare all the simulations in the group, [sim1,sim2,..] compare the different simulations.old. simX is either a simulation name in the DB or a file on the disk')
    compare_parser.add_argument('--projectName', dest="projectName", default=None, type=str, help=projectNameHelpDesc)
    compare_parser.add_argument('--longTable', dest="longFormat", action="store_true", default=False,
                                        help='If exsists, list the parameters as a long table. If does not exist data is pivoted')
    compare_parser.add_argument('--transpose', dest="transpose", action="store_true", default=False,
                                        help='If exsists, list the simulations as rows and the variables as columns')

    compare_parser.add_argument('--format', dest="format", default="pandas", choices=["pandas","json","latex","csv"],
                                        help='The output format: pandas (print the pandas), json, latex')

    compare_parser.add_argument('--file', dest="file", default=None,
                                        help='write the output to a file')
    compare_parser.set_defaults(func=CLI.workflow_compare)

    ### ------------------------
    delete_parser = subparsers.add_parser('delete', help='Delete a workflow. Exports the simulation that was deleted ')
    delete_parser.add_argument('workflows', nargs="+", type=str, help='the list of workflows to remove')
    delete_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    delete_parser.add_argument('--export',dest="Export", default=False, action="store_true", help='Export the deleted file from the DB to the disk')
    delete_parser.add_argument('--overwrite', dest="forceOverwrite", default=False, action="store_true",
                               help='Overwrite the export if the file exists')

    delete_parser.set_defaults(func=CLI.workflow_delete)

    ### ------------------------
    export_parser = subparsers.add_parser('export', help='Export the workflows to the disk')
    export_parser.add_argument('workflows', nargs="+", type=str,help='the list of workflows to export')
    export_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    export_parser.add_argument('--overwrite', dest="forceOverwrite", default=False, action="store_true",
                               help='Overwrite the export if the file exists')

    export_parser.set_defaults(func=CLI.workflow_export)

    ### ------------------------
    export_parser = subparsers.add_parser('compareToDisk', help='Compares the workflow in the DB to the file on the disk')
    export_parser.add_argument('workflows', nargs="+", type=str, help='the list of workflows to export')
    export_parser.add_argument('--projectName', type=str, default=None, help=projectNameHelpDesc)
    export_parser.add_argument('--forceOverwrite', dest="forceOverwrite", default=False, action="store_true",
                               help='Overwrite the export if the file exists')

    export_parser.set_defaults(func=CLI.workflow_compareToDisk)
    ### ------------------------

    parsed = parser.parse_args()

    logger.debug(f"Got {parsed} in the command line")
    if 'func' not in parsed:
        parser.print_help()
    else:
        parsed.func(parsed)
