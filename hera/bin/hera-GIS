#! /usr/bin/env python
from hera.utils.logging import initialize_logging,with_logger
import argparse
import logging
from hera.measurements.GIS import CLI


if __name__ == "__main__":
    initialize_logging(
        with_logger("hera.measurements", handlers=['console'], level='INFO', propagate=False),
         with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
         with_logger("hera.utils", handlers=['console'], level='DEBUG', propagate=False),
    )
    logger = logging.getLogger("hera.bin.hera-GIS")

    projectNameHelpDesc = 'The project name. [Optional]. If does not exist take from caseConfiguration'

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Topic:')

    ##############################################
    ### ---------------------- Topography (vector)
    ##############################################
    topography_vector_parser = subparsers.add_parser('topography_vector', help='Handles the topography')
    topography_vector_subparser = topography_vector_parser.add_subparsers(help='Handles the topography')

    ## ---------------- create empty directory
    topography_vector_parser_list = topography_vector_subparser.add_parser('list', help='Lists datasources')
    topography_vector_parser_list.set_defaults(func=CLI.topography_vector_list)


    ##############################################
    ### ---------------------- Topography (raster)
    ##############################################
    topography_raster_parser = subparsers.add_parser('topography_raster', help='Handles the topography (raster)')
    topography_raster_subparser = topography_raster_parser.add_subparsers(help='Handles the topography (raster)')

    ## ---------------- list datasource
    topography_raster_parser_list = topography_raster_subparser.add_parser('list', help='Lists datasources')
    topography_raster_parser_list.set_defaults(func=CLI.topography_raster_list)

    ## ---------------- create STL file
    topography_raster_parser_toSTL = topography_raster_subparser.add_parser('toSTL', help='Write the topography as STL')
    topography_raster_parser_toSTL.add_argument('--minx', type=str, required=True, help='lower x boundingbox')
    topography_raster_parser_toSTL.add_argument('--miny', type=str, required=True,help='lower y boundingbox')
    topography_raster_parser_toSTL.add_argument('--maxx', type=str, required=True,help='upper x boundingbox')
    topography_raster_parser_toSTL.add_argument('--maxy', type=str, required=True,help='lower y boundingbox')
    topography_raster_parser_toSTL.add_argument('--dxdy', type=str, default=30, help='The resolution of the mesh, Default is 30m.')
    topography_raster_parser_toSTL.add_argument('--inputCRS', type=int, help='The CRS of the input coordinates. For WSG84=4326, for ITM=2039. The default is WSG84')
    topography_raster_parser_toSTL.add_argument('--dataSourceName', default=None, type=str, help='The name of the datasource. If not supplied, uses the default of the toolkit.')
    topography_raster_parser_toSTL.add_argument('--solidName', default=None, type=str, help='The name of the topography solid.')
    topography_raster_parser_toSTL.add_argument('--fileName', type=str, required=True, help='Path to save STL file.')
    topography_raster_parser_toSTL.add_argument('--projectName', type=str, default=None, help='The Project Name. If not provided, uses default project.')
    topography_raster_parser_toSTL.set_defaults(func=CLI.topography_raster_toSTL)

    ##############################################
    ### ---------------------- Buildings
    ##############################################
    buildings_parser = subparsers.add_parser('buildings', help='Handles the buildings')
    buildings_subparser = buildings_parser.add_subparsers(help='Handles the buildings')

    ## ---------------- list datasource
    buildings_parser_list = buildings_subparser.add_parser('list', help='Lists datasources')
    buildings_parser_list.set_defaults(func=CLI.buildings_parser_list)

    ## ---------------- create STL file
    buildings_raster_parser_toSTL = buildings_subparser.add_parser('toSTL', help='Write the topography as STL')
    buildings_raster_parser_toSTL.add_argument('--minx', type=str, required=True, help='The directory to create')
    buildings_raster_parser_toSTL.add_argument('--miny', type=str, required=True,help='The directory to create')
    buildings_raster_parser_toSTL.add_argument('--maxx', type=str, required=True,help='The directory to create')
    buildings_raster_parser_toSTL.add_argument('--maxy', type=str, required=True,help='The directory to create')
    buildings_raster_parser_toSTL.add_argument('--dxdy', type=str, default=30, help='The resolution of the mesh, Default is 30m')
    buildings_raster_parser_toSTL.add_argument('--inputCRS', type=str, help='The CRS of the input coordinates, The default is WSG84')
    buildings_raster_parser_toSTL.add_argument('--outputCRS', type=str, help='The CRS of the output STL (default ITM)')
    buildings_raster_parser_toSTL.add_argument('--dataSourceName', default=None, type=str, help='The name of the datasource, if not supplied, use the default of the toolkit. ')
    buildings_raster_parser_toSTL.add_argument('--solidName', default="Topography", type=str, help='The name of the datasource, if not supplied, use the default of the toolkit. ')
    buildings_raster_parser_toSTL.add_argument('--fileName', type=str, required=True, help='The name of the file STL')
    buildings_raster_parser_toSTL.set_defaults(func=CLI.buildings_raster_toSTL)

    ### ---------------------- Landcover (raster)
    landcover_raster_parser = subparsers.add_parser('landcover', help='Handles the Landcover')

    ##Get Landcover
    getLandcover_sub_parser = landcover_raster_parser.add_subparsers(help='Get Landcover Parser')
    getLandcover_parser = getLandcover_sub_parser.add_parser('getLandcover',help="Get Landcover given coordinates.")
    getLandcover_parser.add_argument('--minx', type=str, required=True, help='Minimum X coordinate.')
    getLandcover_parser.add_argument('--miny', type=str, required=True, help='Minimum Y coordinate.')
    getLandcover_parser.add_argument('--maxx', type=str, required=True, help='Maximum X coordinate.')
    getLandcover_parser.add_argument('--maxy', type=str, required=True, help='Maximum Y coordinate.')
    getLandcover_parser.add_argument('--dxdy', type=str, required=True, help='The resolution of the mesh, Default is 30m.')
    getLandcover_parser.add_argument('--isBuilding', type=bool, default=False, help='If the requested area includes urban areas. Default is False.')
    getLandcover_parser.add_argument('--windDirection', type=str, default=None , help='Wind Meteorological direction. If isBuilding=True, must be specified.')
    getLandcover_parser.add_argument('--resolution', type=str, default=None , help='The size of the squares. If isBuilding=True, must be specified.')
    getLandcover_parser.add_argument('--roughness', type=bool,default=True,help='If to include roughness(z0) field. Default is True.')
    getLandcover_parser.add_argument('--inputCRS', type=str,help='The CRS of the input coordinates, The default is WSG84')
    getLandcover_parser.add_argument('--outputCRS', type=str, help='The CRS of the output STL (default ITM)')
    getLandcover_parser.add_argument('--projectName', type=str, default=None, help='The Project Name. If not provided, uses default project.')
    getLandcover_parser.add_argument('--dataSourceName', default=None, type=str, help='The name of the datasource, if not supplied, use the default of the toolkit. ')
    getLandcover_parser.add_argument('--filePath', type=str, required=True, help='File path to save CSV.')
    getLandcover_parser.set_defaults(func=CLI.get_landocver)


    #-------------------------------------------------

    parsed = parser.parse_args()

    logger.debug(f"Got {parsed} in the command line")
    if 'func' not in parsed:
        parser.print_help()
    else:
        logger.debug("Activating the function")
        parsed.func(parsed)


