#! /usr/bin/env python
import argparse
import logging
from hera.utils.data import CLI
from hera.utils.logging import initialize_logging,with_logger

if __name__=="__main__":
    initialize_logging(
          with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
        with_logger("hera.utils", handlers=['console'], level='DEBUG', propagate=False)


    #     with_logger("hera.simulations.hermesWorkflowToolkit", handlers=['console'], level='INFO', propagate=False),
    #     with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
    )

    logger = logging.getLogger("hera.bin.hera_projects")

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')

    # ------------------- database management
    db_project = subparsers.add_parser('db', help='Database management')
    db_subparsers = db_project.add_subparsers(help='Database management')

    # List
    db_list = db_subparsers.add_parser('list', help='list project')
    db_list.add_argument('--onlyName', dest="fulldetails", default=True, action="store_false",
                             help='Print only the database connection names')
    db_list.set_defaults(func=CLI.db_list)

    # Create
    db_new = db_subparsers.add_parser('create', help='create a project')
    db_new.add_argument('connectionName', type=str,  help='The database name to create')
    db_new.add_argument('--username', type=str,  required=True,help='The username')
    db_new.add_argument('--password', type=str,  required=True,help='The database name to create')
    db_new.add_argument('--IP', type=str,  required=True,help='The database name to create')
    db_new.add_argument('--databaseName', type=str, required=True, help='The database name to create')
    db_new.set_defaults(func=CLI.db_create)

    # Remove
    db_remove = db_subparsers.add_parser('remove', help='create a project')
    db_remove.add_argument('connectionName', type=str, default=None, help='The database name to create')
    db_remove.set_defaults(func=CLI.db_remove)

    # ------------------- project management
    parser_project = subparsers.add_parser('project', help='projects management')
    project_subparsers = parser_project.add_subparsers(help='projects management')

    # List
    parser_list = project_subparsers.add_parser('list', help='list project')
    parser_list.add_argument('--connectionName', dest="connectionName", type=str, default=None,
                            help='connection to use. The default is the user name')
    parser_list.add_argument('--onlyName', dest="fulldetails", default=True, action="store_false",help='Print only the project name')
    parser_list.set_defaults(func=CLI.project_list)

    # Create
    parser_new = project_subparsers.add_parser('create', help='create a project')
    parser_new.add_argument('projectName', type=str, default=None, help='The project name to create')
    parser_new.add_argument('--directory', dest="directory",type=str, default=None, help='directory to create the project in')
    parser_new.add_argument('--noRepositories', dest="loadRepositories",default=True,action="store_false")
    parser_new.add_argument('--dont-overwrite',dest="overwrite",default=True,action="store_true")
    parser_new.set_defaults(func=CLI.project_create)

    ### Dump/save
    parser_dump = project_subparsers.add_parser('dump', help='Saves the project record to the disk')
    parser_dump.add_argument('projectName', type=str, default=None, help='The project name to create')
    parser_dump.add_argument('query',metavar='query',nargs='*', type=str, help='the query parameters')
    parser_dump.add_argument('--fileName',type=str, help='save to',default=None,required=False)
    parser_dump.add_argument('--format', dest="outputFormat", default="table",choices=['table','json'], help='Print only the project name')
    parser_dump.set_defaults(func=CLI.project_dump)

    ### Load
    parser_load = project_subparsers.add_parser('load', help='load records from a file')
    parser_load.add_argument('projectName', type=str, default=None, help='The project name to create')
    parser_load.add_argument('projectName', type=str, help='The workflow file to load')
    parser_load.set_defaults(func=CLI.project_load)

    ### update
    repository_update = project_subparsers.add_parser('update', help='Update all repositories in workspace to a project')
    repository_update.add_argument('projectName', help='The project to load the repository')
    repository_update.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                 help='overwrite the existing projcet with the repository')
    repository_update.set_defaults(func=CLI.update)

    # ----------------- Repository
    repository_parser = subparsers.add_parser('repository', help='handling repositories')
    repository_subparsers = repository_parser.add_subparsers(help='sub-command help')

    # list
    repository_list = repository_subparsers.add_parser('list', help='lists objects')
    repository_list.set_defaults(func=CLI.repository_list)

    ### add
    repository_add = repository_subparsers.add_parser('add', help='Add the data repository to the default project')
    repository_add.add_argument('repositoryName', type=str, help='The full path to the repository descriptor file of the repository')
    repository_add.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                help='overwrite the existing workflow with the same name')
    repository_add.set_defaults(func=CLI.repository_add)

    ### remove
    repository_remove = repository_subparsers.add_parser('remove', help='Remove data repository from the default project')
    repository_remove.add_argument('repositoryName', type=str, help='name of the repository')
    repository_remove.set_defaults(func=CLI.repository_remove)

    ### show
    repository_show = repository_subparsers.add_parser('show', help='Show the items in the data repository')
    repository_show.add_argument('repositoryName', type=str, help='name of the repository')
    repository_show.set_defaults(func=CLI.repository_show)

    ### load
    repository_load = repository_subparsers.add_parser('load', help='Load the repository to a project')
    repository_load.add_argument('repositoryName', type=str, help='name of the repository')
    repository_load.add_argument('projectName', type=str, help='name of the project')
    repository_load.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,
                                help='overwrite the existing workflow with the same name')
    repository_load.set_defaults(func=CLI.repository_load)


    ##################### exec
    parsed = parser.parse_args()
    logger.debug(f"Got {parsed} in the command line")
    if 'func' not in parsed:
        parser.print_help()
    else:
        parsed.func(parsed)









