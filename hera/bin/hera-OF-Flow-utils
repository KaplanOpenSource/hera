#! /usr/bin/env python

"""
    Utils to generate openFOAM templtes.

    uses the configuration file.

"""
import argparse
import json
import os
import pandas
from hera.utils.jsonutils import loadJSON
#from hera.simulations.openFoam.NavierStokes.preprocess.canopyWindProfile import urbanLogNormalProfile
from hera.simulations.openFoam import Workflow_Flow
from hera.simulations.openFoam.datalayer.OFObjects import ofObjectHome
from itertools import product

def createEmpty(args):

    caseDir = args.caseDirectory
    fieldList = args.fields
    print(f"Making case {caseDir} with fields {','.join(fieldList)}")

    # Make the case :
    os.makedirs(os.path.join(caseDir,"constant"),exist_ok=True)
    os.makedirs(os.path.join(caseDir, "system"),exist_ok=True)
    os.makedirs(os.path.join(caseDir, "constant","triSurface"), exist_ok=True)
    os.makedirs(os.path.join(caseDir, "0"),exist_ok=True)
    os.makedirs(os.path.join(caseDir, "0.parallel"), exist_ok=True)

    # Makes the empty fields
    for fieldName in fieldList:
        field = ofObjectHome().getField(fieldName)
        field.write(caseDirectory=caseDir, location=0)
        field.emptyParallelField(caseDirectory=caseDir)


def createBuildings(args):

    configuration = loadJSON(args.configurationFile)

    regionCoords = configuration['regions'].get(args.regionName,None)

    if regionCoords is None:
        raise ValueError(f"The region{args.regionName} is not found. Found the regions: {','.join(configuration['regions'].keys())}")

    bx = [regionCoords['parameters']['xmin'], regionCoords['parameters']['ymin'], regionCoords['parameters']['xmax'], regionCoords['parameters']['ymax']]

    stlFileName = f"{args.outputFile.split('.')[0]}.stl"


    tk = toolkitHome.getToolkit(toolkitName=toolkitHome.GIS_BUILDINGS ,
                                projectName=configuration['projectName'])

    tk.regionToSTL(regionNameOrData=bx,
                   outputFileName=stlFileName,
                   flat=None,
                   datasourceName=args.datasource,
                   saveMode=toolkitHome.TOOLKIT_SAVEMODE_NOSAVE)


def createTopography(args):
    configuration = loadJSON(args.configurationFile)

    regionCoords = configuration['regions'].get(args.regionName,None)

    if regionCoords is None:
        raise ValueError(f"The region{args.regionName} is not found. Found the regions: {','.join(configuration['regions'].keys())}")

    bx = [regionCoords['parameters']['xmin'], regionCoords['parameters']['ymin'], regionCoords['parameters']['xmax'], regionCoords['parameters']['ymax']]
    tk = toolkitHome.getToolkit(toolkitName=toolkitHome.GIS_TOPOGRAPHY,
                                projectName=configuration['projectName'])
    stl = tk.regionToSTL(shapeDataOrName=bx,
                         dxdy = args.dxdy,
                         datasourceName=args.datasource)

    stlFileName = f"{args.outputFile.split('.')[0]}.stl"
    with open(stlFileName,"w") as stlfile:
        stlfile.write(stl)

def windProfile(args):
    """
        Creates a wind profile according to the urban canopy.

        Currently, only the log-normal wind profile is implemented.

    Parameters
    ----------
    args
        - caseDirectory

    Returns
    -------

    """
    hwf = Workflow_Flow(args.workflowFile)
    projectName = hwf.parameters['projectName']

    buildings_tk = toolkitHome.getToolkit(toolkitName=toolkitHome.GIS_BUILDINGS, projectName=projectName)
    of_tk = toolkitHome.getToolkit(toolkitName=toolkitHome.OPENFOAM, projectName=projectName)

    buildingsData =  dict(hwf.parameters['domains'][args.buildingDomainName])
    buildingsData['crs'] = None

    caseDirectory = hwf.parameters['caseDirectory']

    # 1. Prepeare station file.
            # currently just take 1 speed and direction.
    wind = pandas.DataFrame(hwf.parameters['wind'])

    # 2. Prepare the lambda geopandas. (write in the case directory)
            #--> check if the file exists, if it does, then use it.
    lambdaBuildings = buildings_tk.analysis.LambdaFromDatasource(windMeteorologicalDirection=wind.MeteorologicalDirection.mean(),
                                                                 resolution=hwf.parameters['LambdaCalculationResolution'],
                                                                 **buildingsData)

    # 3. Get the cell centers.

    #### This should change to get height above topography of the mesh.
    ##   It has the buildingDomainName. So it should take the topography and try to calculate the height of the cells.
    ##   Should solve synthetic data in which the topogrpahy is synthetic or does not exist.
    meshCells = of_tk.getMesh(caseDirectory)

    # 4. Calculate the Ux,Uy of each point in the mesh.
    data = urbanLogNormalProfile(cellCenters=meshCells,lambdaGrid=lambdaBuildings,stations=wind)
    data = data.assign(Uz=0)
    # 5. Write in the constant/U0 file.
    dims = of_tk.ofObjectHome.getDimensions(m=1,s=-1)
    newField = of_tk.ofObjectHome.getField(fieldName="U0",componentNames=['Ux','Uy','Uz'],dimensions=dims)
    newField.write(caseDirectory=caseDirectory, location="constant", data=data)


def listRegions(args):
    """
        Lists all the regions of the obj file so that they could be inserted to the snappyHexMesh node.

    Parameters
    ----------
    args.objectFile : the obj file.


    Returns
    -------
        Prints a list of regions with their type .
    """
    try:
        from freecad import app as FreeCAD
        import Mesh
    except ImportError:
        self.logger.error("freecad module  is not installed in the environment")
        raise ImportError("freecad is not installed. please install it before trying again.")

    # Load the file
    fileName = args.objectFile
    Mesh.open(fileName)
    objFile  = FreeCAD.getDocument("Unnamed")

    if objFile is None:
        print(f"{fileName} not found")
        exit()

    outputDict = dict()

    for regionObj in objFile.findObjects():
        outputDict[regionObj.Name] = dict(name=regionObj.Name,type="wall|patch")

    print(json.dumps(outputDict,indent=4,sort_keys=True))


def createBoundaryConditions(args):
    """
        Creates the list of the boudnary conditions for each fieldin the object .

    Parameters
    ----------
    args: arguments from the command line.

        .workflowFile - The path to the template workflow
        .objectFile - the object file.

    Returns
    -------

    """
    #hwf = hermesOpenFOAMWorkflow(args.workflowFile)

    try:
        from freecad import app as FreeCAD
        import Mesh
    except ImportError:
        self.logger.error("freecad module  is not installed in the environment")
        raise ImportError("freecad is not installed. please install it before trying again.")

    # Load the file
    fileName = args.objectFile
    Mesh.open(fileName)
    objFile  = FreeCAD.getDocument("Unnamed")

    ret = dict()
    for fieldName in args.fields:

        boundary = dict()
        for  regionObj in objFile.findObjects():
                    boundary[regionObj.Name] = dict(type="zeroGradient",value="")
        ret[fieldName] = dict(boundaryField=boundary)

    print(json.dumps(ret, indent=4, sort_keys=True))



if __name__=="__main__":

    # ### ---- Debugging
    # from hera import toolkitHome
    # tk = toolkitHome.getToolkit(toolkitName=toolkitHome.LOGGING,projectName=None)
    # tk.addLogger(loggerName="simulations.openFoam",handlers=['console'],level='DEBUG',propagate=False)
    # tk.addLogger(loggerName="measurements.GIS.vector",handlers=['console'],level='EXECUTION',propagate=False)
    # tk.addLogger(loggerName="measurements.GIS.vector.buildings", handlers=['console'], level='DEBUG', propagate=False)
    # ### ---- Debugging

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')

    parser_createEmpty  = subparsers.add_parser('createEmpty', help='Creates an empty case with empty fields')
    parser_createEmpty.add_argument('caseDirectory', type=str, help='The directory to create')
    parser_createEmpty.add_argument('--fields',
                                    nargs='*',
                                    type=str,
                                    help='[list of field]')

    parser_createEmpty.set_defaults(func=createEmpty)

    ########################################################
    ######################################################## STLOBJFiles
    ########################################################
    parser_stlUtils = subparsers.add_parser('STLOBJUtils', help='Utilities for debugging STL and obj files ')
    stlUtils_subparsers = parser_stlUtils.add_subparsers(help='Utilities for debugging STL and obj files ')

    parser_createBuildings = stlUtils_subparsers.add_parser('buildings', help='Creates an stl for the desired region. Mostly for debugging')
    parser_createBuildings.add_argument('configurationFile', type=str, help='The configuration file')
    parser_createBuildings.add_argument('regionName', type=str, help='the region to build')
    parser_createBuildings.add_argument('datasource', type=str, help='the datasource to use')
    parser_createBuildings.add_argument('outputFile', type=str, help='the output file name')
    parser_createBuildings.set_defaults(func=createBuildings)

    ########################################################

    parser_createTopography = stlUtils_subparsers.add_parser('topography', help='Creates an stl for the desired region. Mostly for debugging')
    parser_createTopography.add_argument('configurationFile', type=str, help='The configuration file')
    parser_createTopography.add_argument('regionName', type=str, help='the region to build')
    parser_createTopography.add_argument('datasource', type=str, help='the datasource to use')
    parser_createTopography.add_argument('outputFile', type=str, help='the output file name')
    parser_createTopography.add_argument('--dxdy', dest='dxdy',default=50,type=int, help='the resolution')
    parser_createTopography.set_defaults(func=createTopography)

    ########################################################

    parser_createTopography = stlUtils_subparsers.add_parser('listRegions', help='Lists the regions ')
    parser_createTopography.add_argument('objectFile', type=str, help='The object file')
    parser_createTopography.set_defaults(func=listRegions)

    parser_createTopography = stlUtils_subparsers.add_parser('createBoundaryConditions', help='Creates the boundary conditions for all the variable sin the ')
    parser_createTopography.add_argument('objectFile', type=str, help='The objectFile file')
    parser_createTopography.add_argument('--f', '--fields', dest="fields", type=str, nargs='+', required=True,help="The list of the fields to create")
    parser_createTopography.set_defaults(func=createBoundaryConditions)


    ########################################################
    ######################################################## Initial conditions
    ########################################################
    parser_initial = subparsers.add_parser('initialConditions', help='Utilities for debugging STL and obj files ')
    initial_subparsers = parser_initial.add_subparsers(help='Utilities for debugging STL and obj files ')

    parser_createWind = subparsers.add_parser('windProfile',help='Creates a wind profile on an existing case')
    parser_createWind.add_argument('workflowFile', type=str, help='The workflow file')
    parser_createWind.add_argument('buildingDomainName', type=str, help='The name of the geometry region to use from the params node')
    parser_createWind.set_defaults(func=windProfile)


    ########################################################
    parsed = parser.parse_args()
    parsed.func(parsed)
