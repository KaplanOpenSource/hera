#! /usr/bin/env python
import argparse
import json
import logging
import sys
import shutil
import os
from hera.simulations.openFoam import Workflow_Flow
from hera.utils import loadJSON
from hera.simulations.hermesWorkflowToolkit import simulationTypes

def prepareAll(arguments):
    """
        Prepares the workflow to the specific case by using the
        caseConfiguration file.


        Its strucuture is given in the examples ...


    Parameters
    ----------
    arguments
        .args : list
            The workflow file, target directory and the configuration file.

        .noParallel: bool
            If true, then change the workflow to run as composed case.

    Returns
    -------

    """
    logger = logging.getLogger("hera.bin.hera_OF_workflows.add")
    logger.info(" -- Starting: adding workflow to the group --")
    logger.info(f"Loading the workflow {arguments.workflow} and the configuration file {arguments.configurationFile}")
    configuration = loadJSON(arguments.configurationFile)
    hwf = Workflow_Flow(workflowJSON=arguments.workflow)

    templateName =configuration["specializedTemplateName"]
    logger.info(f"Specializing template {templateName}")

    logger.debug("...Making directory")
    os.makedirs(templateName,exist_ok=True)

    # 1. Prepare the geometry. Build the STL
    logger.debug("...Preparing geometry")
    hwf.prepareGeometry(templateName, configuration,arguments.overwrite)

    # 2. Prepare the mesh
    logger.debug("...Preparing mesh")
    hwf.prepareMesh(configurationFile=configuration)

    # 3. Prepare the boundary conditions and initial conditinos .
    #    changes the dict change node.
    logger.debug("...Preparing Initial and boundary conditions")
    hwf.prepareICandBC(configurationFile=configuration)

    if arguments.noParallel:
        hwf.changeWorkflowToRunAsComposed()

    projectName = configuration.get("projectName",None)
    simulationGroup    = configuration.get("specializedTemplateName",None)
    caseExecution = configuration.get("caseExecution", None)

    logger.debug(f"Setting hera metadata: project name is {projectName} and simulation group is {simulationGroup}")
    if projectName is not None:
        hwf.projectName = projectName

    if simulationGroup is not None:
        hwf.simulationGroup = simulationGroup

    if caseExecution is not None:
        hwf.caseExecution = caseExecution

    hwf.workflowType = simulationTypes.OF_FLOWFIELD

    logger.debug(f"Writing specialized workflow to file {templateName}.json")
    hwf.write(f"{templateName}.json",arguments.overwrite)


if __name__=="__main__":

    ### ---- Debugging
    from hera.utils.logging.helpers import initialize_logging, with_logger
    initialize_logging(
        with_logger("hera.simulations.old", handlers=['console'], level='DEBUG', propagate=False),
        with_logger("hera.bin", handlers=['console'], level='DEBUG', propagate=False),
    )
    ### ---- Debugging

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')

    #parser_make  = subparsers.add_parser('make', help='Makes the relevant template')


    # Make - makes the case from requested template type.
    #        1. The template types should be datasource in the OF toolkit.
    #        2. Creates a default parameter file for the simulation runs.

    # Prepare - Specialized the workflow to the specific data of the run.
    #       1. Read the parameter file caseParameters.json and adjust the nodes of the template:
    #                - Geometry:
    #                       : Create (if necessary)
    #                       : Change the snappyHexMesh node : either add the parameters of the geometry
    #                         If geometry is empty, remove the node.
    #                - Other nodes:
    #                       : Write  the node in the appropriate .
    #       2.
    parser_prepare = subparsers.add_parser('prepare',help='Specialized the template according to specific configuration of the case')
    subparsers_prepare = parser_prepare.add_subparsers(help='sub-command help')

    parser_prepare = subparsers_prepare.add_parser('all',help='Specialized the template according to specific configuration of the case')
    parser_prepare.add_argument('workflow', type=str,help='The project to load the data')
    parser_prepare.add_argument('configurationFile', type=str,default="caseConfiguration.json",help='The name of the datasource to load')
    parser_prepare.add_argument('--noParallel', dest="noParallel", action="store_true",default=False, help='Run as single processor even if template is parallel')
    parser_prepare.add_argument('--overwrite', dest="overwrite", action="store_true", default=False,help='Run as single processor even if template is parallel')
    parser_prepare.set_defaults(func=prepareAll)

    ############################################################################


    ############################################################################

    parsed = parser.parse_args()
    parsed.func(parsed)

