#! /usr/bin/env python

import argparse
import json
import sys
import shutil
import os
from hera.simulations.openFoam.OFObjects import ofObjectHome
from hera.utils.jsonutils import loadJSON
from hera import toolkitHome

def createEmpty(args):
    if len(args.args) == 0 :
        raise ValueError("Must supply case directory")

    caseDir = args.args[0]
    fieldList = args.args[1:]
    print(f"Making case {caseDir} with fields {','.join(fieldList)}")

    # Make the case :
    os.makedirs(os.path.join(caseDir,"constant"),exist_ok=True)
    os.makedirs(os.path.join(caseDir, "system"),exist_ok=True)
    os.makedirs(os.path.join(caseDir, "0"),exist_ok=True)
    os.makedirs(os.path.join(caseDir, "0.parallel"), exist_ok=True)

    # Makes the empty fields
    for fieldName in fieldList:
        field = ofObjectHome().getField(fieldName)
        field.write(caseDirectory=caseDir,time=0)
        field.emptyParallelField(caseDirectory=caseDir,time=0)


def createBuildings(args):

    configuration = loadJSON(args.configurationFile)

    regionCoords = configuration['regions'].get(args.regionName,None)

    if regionCoords is None:
        raise ValueError(f"The region{args.regionName} is not found. Found the regions: {','.join(configuration['regions'].keys())}")

    bx = [regionCoords['parameters']['xmin'], regionCoords['parameters']['ymin'], regionCoords['parameters']['xmax'], regionCoords['parameters']['ymax']]

    stlFileName = f"{args.outputFile.split('.')[0]}.stl"


    tk = toolkitHome.getToolkit(toolkitName=toolkitHome.GIS_BUILDINGS ,
                                projectName=configuration['projectName'])

    tk.regionToSTL(regionNameOrData=bx,
                   outputFileName=stlFileName,
                   flat=None,
                   dataSourceName=args.datasource,
                   saveMode=toolkitHome.TOOLKIT_SAVEMODE_NOSAVE)


def createTopography(args):
    configuration = loadJSON(args.configurationFile)

    regionCoords = configuration['regions'].get(args.regionName,None)

    if regionCoords is None:
        raise ValueError(f"The region{args.regionName} is not found. Found the regions: {','.join(configuration['regions'].keys())}")

    bx = [regionCoords['parameters']['xmin'], regionCoords['parameters']['ymin'], regionCoords['parameters']['xmax'], regionCoords['parameters']['ymax']]
    tk = toolkitHome.getToolkit(toolkitName=toolkitHome.GIS_TOPOGRAPHY,
                                projectName=configuration['projectName'])
    stl = tk.regionToSTL(shapeDataOrName=bx,
                         dxdy = args.dxdy,
                         dataSourceName=args.datasource)

    stlFileName = f"{args.outputFile.split('.')[0]}.stl"
    with open(stlFileName,"w") as stlfile:
        stlfile.write(stl)


if __name__=="__main__":

    ### ---- Debugging
    from hera import toolkitHome
    tk = toolkitHome.getToolkit(toolkitName=toolkitHome.LOGGING,projectName=None)
    tk.addLogger(loggerName="simulations.openFoam",handlers=['console'],level='DEBUG',propagate=False)
    tk.addLogger(loggerName="measurements.GIS.vector",handlers=['console'],level='EXECUTION',propagate=False)
    ### ---- Debugging


    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')

    parser_createEmpty  = subparsers.add_parser('createEmpty', help='Creates an empty case with empty fields')
    parser_createEmpty.add_argument('args',
                                    nargs='*',
                                    type=str,
                                    help='[Case directory] [list of field]')

    parser_createEmpty.set_defaults(func=createEmpty)


    parser_createBuildings = subparsers.add_parser('createBuildings', help='Creates an stl for the desired region. Mostly for debugging')
    parser_createBuildings.add_argument('configurationFile', type=str, help='The configuration file')
    parser_createBuildings.add_argument('regionName', type=str, help='the region to build')
    parser_createBuildings.add_argument('datasource', type=str, help='the datasource to use')
    parser_createBuildings.add_argument('outputFile', type=str, help='the output file name')
    parser_createBuildings.set_defaults(func=createBuildings)

    ########################################################3

    parser_createTopography = subparsers.add_parser('createTopography', help='Creates an stl for the desired region. Mostly for debugging')
    parser_createTopography.add_argument('configurationFile', type=str, help='The configuration file')
    parser_createTopography.add_argument('regionName', type=str, help='the region to build')
    parser_createTopography.add_argument('datasource', type=str, help='the datasource to use')
    parser_createTopography.add_argument('outputFile', type=str, help='the output file name')
    parser_createTopography.add_argument('--dxdy', dest='dxdy',default=50,type=int, help='the resolution')
    parser_createTopography.set_defaults(func=createTopography)


    parsed = parser.parse_args()
    parsed.func(parsed)
